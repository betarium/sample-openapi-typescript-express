/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}

import * as express from 'express';
import { container } from 'tsyringe';
import * as runtime from '../runtime';
{{#imports.0}}
import type {
  {{#imports}}
  {{className}},
  {{/imports}}
} from '../models';
{{^withoutRuntimeChecks}}
import {
    {{#imports}}
    {{className}}FromJSON,
    {{className}}ToJSON,
    {{/imports}}
} from '../models';
{{/withoutRuntimeChecks}}
{{/imports.0}}

{{#operations}}
{{#operation}}
{{#allParams.0}}
export interface {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}Request {
{{#allParams}}
    {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
{{/allParams}}
}

{{/allParams.0}}
{{/operation}}
{{/operations}}
{{^withoutInterfaces}}
{{#operations}}
/**
 * {{classname}} - interface
 * {{#lambda.indented_1}}{{{unescapedDescription}}}{{/lambda.indented_1}}
 * @export
 * @interface {{classname}}Interface
 */
export interface {{classname}} {
{{#operation}}
    /**
     {{#notes}}
     * {{&notes}}
     {{/notes}}
     {{#summary}}
     * {{&summary}}
     {{/summary}}
     */
    {{^useSingleRequestParameter}}
    {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}}{{/allParams}}): Promise<{{{returnType}}}{{^returnType}}void{{/returnType}}>;
    {{/useSingleRequestParameter}}
    {{#useSingleRequestParameter}}
    {{nickname}}({{#allParams.0}}requestParameters: {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}Request{{/allParams.0}}): Promise<{{{returnType}}}{{^returnType}}void{{/returnType}}>;
    {{/useSingleRequestParameter}}

{{/operation}}
}

{{/operations}}
{{/withoutInterfaces}}
{{#hasEnums}}

{{#operations}}
{{#operation}}
{{#allParams}}
{{#isEnum}}
{{#stringEnums}}
/**
  * @export
  * @enum {string}
  */
export enum {{operationIdCamelCase}}{{enumName}} {
{{#allowableValues}}
    {{#enumVars}}
    {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
    {{/enumVars}}
{{/allowableValues}}
}
{{/stringEnums}}
{{^stringEnums}}
/**
 * @export
 */
export const {{operationIdCamelCase}}{{enumName}} = {
{{#allowableValues}}
    {{#enumVars}}
    {{{name}}}: {{{value}}}{{^-last}},{{/-last}}
    {{/enumVars}}
{{/allowableValues}}
} as const;
export type {{operationIdCamelCase}}{{enumName}} = typeof {{operationIdCamelCase}}{{enumName}}[keyof typeof {{operationIdCamelCase}}{{enumName}}];
{{/stringEnums}}
{{/isEnum}}
{{/allParams}}
{{/operation}}
{{/operations}}
{{/hasEnums}}

/*
export function init{{classname}}Sample(){
{{#operations}}
    container.register("{{classname}}", { useValue: new {{classname}}Sample() });
{{/operations}}
}
*/

{{#operations}}
export function get{{classname}}Route(errorHandler?: runtime.ApiErrorHandler): express.Router {
    const errorHandlerInner = errorHandler ?? runtime.ApiErrorHandlerDefault

    const router = express.Router();

    const api = container.resolve<{{classname}}>('{{classname}}');

    {{#operation}}
    router.{{httpMethodLower}}('{{pathServer}}', async function (req: express.Request, res: express.Response, next: express.NextFunction) {
        try{
            {{#hasBodyParam}}
            {{#bodyParam}}
            const {{paramName}} = req.body as {{{dataType}}};
            {{/bodyParam}}
            {{/hasBodyParam}}
            {{#queryParams}}
            const {{paramName}} = runtime.convert_{{dataType}}(req.query['{{paramName}}']);
            {{/queryParams}}
            {{#pathParams}}
            const {{paramName}} = runtime.convert_{{dataType}}(req.params['{{paramName}}']);
            {{/pathParams}}
            {{#formParams}}
            const {{paramName}} = runtime.convert_{{dataType}}(req.body['{{paramName}}']);
            {{/formParams}}

            {{#allParams.0}}
            const input = {
            {{#bodyParam}}
                {{paramName}}: {{paramName}},
            {{/bodyParam}}
            {{#queryParams}}
                {{paramName}}: {{paramName}},
            {{/queryParams}}
            {{#pathParams}}
                {{paramName}}: {{paramName}},
            {{/pathParams}}
            {{#formParams}}
                {{paramName}}: {{paramName}},
            {{/formParams}}
            } as {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}Request;
            {{/allParams.0}}

            {{#allParams.0}}
            const output = await api.{{nickname}}(input);
            {{/allParams.0}}
            {{^allParams.0}}
            const output = await api.{{nickname}}();
            {{/allParams.0}}
            res.json(output);
        }
        catch(err){
            await errorHandlerInner(err, req, res, next);
        }
    })

    {{/operation}}

    return router;
}
{{/operations}}

